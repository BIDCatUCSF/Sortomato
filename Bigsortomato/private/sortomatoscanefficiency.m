function sortomatoscanefficiency(~, ~, hSortomatoBase)
    % SORTOMATOSCANEFFICIENCY Calculate object search efficiencies
    %   Detailed explanation goes here
    %
    %  ©2010-2013, P. Beemiller. Licensed under a Creative Commmons Attribution
    %  license. Please see: http://creativecommons.org/licenses/by/3.0/
    %
    
    %% Check for an already-running GUI.
    guiChildren = getappdata(hSortomatoBase, 'guiChildren');
    
    if ~isempty(guiChildren)
        guiScanEfficiency = findobj(guiChildren, 'Tag', 'guiScanEfficiency');
        
        if ~isempty(guiScanEfficiency)
            figure(guiScanEfficiency)
            return
        end % if
    end % if
    
    %% Get the Surpass Spots and Surfaces.
    xImarisApp = getappdata(hSortomatoBase, 'xImarisApp');
    surpassObjects = xtgetsporfaces(xImarisApp, 'Both');
    
    % If the scene has no Spots or Surfaces, return.
    if isempty(surpassObjects)
        return
    end % if
    
    %% Set the figure and font colors.
    if all(get(hSortomatoBase, 'Color') == [0 0 0])
        bColor = 'k';
        fColor = 'w';

    else
        bColor = 'w';
        fColor = 'k';
        
    end % if
    
    %% Create a GUI to select objects and set parameters.
    sortomatoPos = get(hSortomatoBase, 'Position');
    
    guiWidth = 230;
    guiHeight = 433;
    guiPos = [...
        sortomatoPos(1) + sortomatoPos(3)/2 - guiWidth/2, ...
        sortomatoPos(2) + sortomatoPos(4) - guiHeight - 25, ...
        guiWidth, ...
        guiHeight];
    
    guiScanEfficiency = figure(...
        'CloseRequestFcn', {@closerequestfcn, hSortomatoBase}, ...
        'Color', bColor, ...
        'MenuBar', 'None', ...
        'Name', 'Scanning efficiency estimation', ...
        'NumberTitle', 'Off', ...
        'Position', guiPos, ...
        'Resize', 'Off', ...
        'Tag', 'guiScanEfficiency');
    
    uicontrol(...
        'Background', bColor, ...
        'FontSize', 12, ...
        'Foreground', fColor, ...
        'HorizontalAlign', 'Left', ...
        'Position', [10 394 108 24], ...
        'String', 'Objects', ...
        'Style', 'text', ...
        'Tag', 'textObjects');
        
    listObjects = uicontrol(...
        'Background', bColor, ...
        'FontSize', 12, ...
        'Foreground', fColor, ...
        'Min', 1, ...
        'Max', 3, ...
        'Parent', guiScanEfficiency, ...
        'Position', [10 289 210 105], ...
        'String', {surpassObjects.Name}, ...
        'Style', 'listbox', ...
        'Tag', 'popupObjects', ...
        'TooltipString', 'Select objects for scanning efficiency calculation', ...
        'Value', 1);
        
    % Create the target factor group.
    groupTargetFactors = uipanel(...
        'BackgroundColor', bColor, ...
        'BorderType', 'Line', ...
        'FontSize', 12, ...
        'ForegroundColor', fColor, ...
        'HighlightColor', fColor, ...
        'Parent', guiScanEfficiency, ...
        'Position', [10 90 210 178]./[guiPos(3) guiPos(4) guiPos(3) guiPos(4)], ...
        'Title', 'Target factors', ...
        'TitlePosition', 'Centertop', ...
        'Tag', 'groupTargetFactors', ...
        'Units', 'Pixels');
    uistack(groupTargetFactors, 'bottom')
    
    % Create the target factor edit boxes.
    uicontrol(...
        'Background', bColor, ...
        'FontSize', 10, ...
        'Foreground', fColor, ...
        'HorizontalAlignment', 'Left', ...
        'Parent', groupTargetFactors, ...
        'Position', [10 134 75 20], ...
        'String', 'Radius', ...
        'Style', 'text', ...
        'Tag', 'textTargetRadius');
    
    editTargetRadius = mycontrol(...
        'Background', bColor, ...
        'FontSize', 10, ...
        'Foreground', fColor, ...
        'Parent', groupTargetFactors, ...
        'Position', [150 136 50 20], ...
        'String', 10, ...
        'Style', 'edit', ...
        'Tag', 'editTargetRadius', ...
        'TooltipString', 'Enter the target radius');
    set(editTargetRadius.Handle, 'Callback', {@editvalidationcallback, editTargetRadius})
        
    uicontrol(...
        'Background', bColor, ...
        'FontSize', 10, ...
        'Foreground', fColor, ...
        'HorizontalAlignment', 'Left', ...
        'Parent', groupTargetFactors, ...
        'Position', [10 104 75 20], ...
        'String', 'Distance', ...
        'Style', 'text', ...
        'Tag', 'textTargetDistance');
    
    editTargetDistance = mycontrol(...
        'Background', bColor, ...
        'FontSize', 10, ...
        'Foreground', fColor, ...
        'Parent', groupTargetFactors, ...
        'Position', [150 106 50 20], ...
        'String', 50, ...
        'Style', 'edit', ...
        'Tag', 'editTargetDistance', ...
        'TooltipString', 'Enter the mean target distance');
    set(editTargetDistance.Handle, 'Callback', {@editvalidationcallback, editTargetDistance})
    
    uicontrol(...
        'Background', bColor, ...
        'FontSize', 10, ...
        'Foreground', fColor, ...
        'HorizontalAlignment', 'Left', ...
        'Parent', groupTargetFactors, ...
        'Position', [10 74 75 20], ...
        'String', 'Distribution', ...
        'Style', 'text', ...
        'Tag', 'textTargetDistribution');
    
    popupTargetDistribution = mycontrol(...
        'Background', bColor, ...
        'FontSize', 10, ...
        'Foreground', fColor, ...
        'Parent', groupTargetFactors, ...
        'Position', [130 76 70 20], ...
        'String', {'Fixed', 'Normal', 'Uniform'}, ...
        'Style', 'popup', ...
        'Tag', 'popupTargetDistribution', ...
        'TooltipString', 'Enter the target distance distribution about the mean', ...
        'Value', 3);
        
    uicontrol(...
        'Background', bColor, ...
        'FontSize', 10, ...
        'Foreground', fColor, ...
        'HorizontalAlignment', 'Left', ...
        'Parent', groupTargetFactors, ...
        'Position', [10 39 75 20], ...
        'String', 'Number', ...
        'Style', 'text', ...
        'Tag', 'textTargetNumber');
    
    editTargetNumber = mycontrol(...
        'Background', bColor, ...
        'FontSize', 10, ...
        'Foreground', fColor, ...
        'Parent', groupTargetFactors, ...
        'Position', [150 41 50 20], ...
        'String', 10, ...
        'Style', 'edit', ...
        'Tag', 'editTargetNumber', ...
        'TooltipString', 'Enter the target number');
    set(editTargetNumber.Handle, 'Callback', {@editvalidationcallback, editTargetNumber})
    
    % Create the trial number edit box.
    uicontrol(...
        'Background', bColor, ...
        'FontSize', 10, ...
        'Foreground', fColor, ...
        'HorizontalAlignment', 'Left', ...
        'Parent', groupTargetFactors, ...
        'Position', [10 9 75 20], ...
        'String', 'Trials', ...
        'Style', 'text', ...
        'Tag', 'textTrials');
    
    editTrials = mycontrol(...
        'Background', bColor, ...
        'FontSize', 10, ...
        'Foreground', fColor, ...
        'Parent', groupTargetFactors, ...
        'Position', [150 11 50 20], ...
        'String', 100, ...
        'Style', 'edit', ...
        'Tag', 'editTrials', ...
        'TooltipString', 'Enter the number of trials to perform', ...
        'Value', 1);
    set(editTrials.Handle, 'Callback', {@editvalidationcallback, editTrials})    
    
    % Create the calculate button.    
    uicontrol(...
        'Background', bColor, ...
        'Callback', {@pushcalc}, ...
        'FontSize', 12, ...
        'Foreground', fColor, ...
        'Parent', guiScanEfficiency, ...
        'Position', [125 40 90 24], ...
        'String', 'Calculate', ...
        'Style', 'pushbutton', ...
        'Tag', 'pushCalc', ...
        'TooltipString', 'Calculate scanning efficiency');
        
    %% Setup the status bar.
    hStatus = statusbar(guiScanEfficiency, '');
    hStatus.CornerGrip.setVisible(false)
    
    hStatus.ProgressBar.setForeground(java.awt.Color.black)
    hStatus.ProgressBar.setString('')
    hStatus.ProgressBar.setStringPainted(true)
    
    %% Add the GUI to the base's GUI children.
    guiChildren = getappdata(hSortomatoBase, 'guiChildren');
    guiChildren = [guiChildren; guiScanEfficiency];
    setappdata(hSortomatoBase, 'guiChildren', guiChildren)
    
    %% Nested function to perform scanning efficiency calculation
    function pushcalc(varargin)
        %
        %
        %
        
        %% Setup the status bar.
        hStatus.setText('Generating targets')
        
        %% Get the target parameters.
        targetRadius = str2double(get(editTargetRadius.Handle, 'String'));
        targetDistance = str2double(get(editTargetDistance.Handle, 'String'));
        
        targetDistributionString = get(popupTargetDistribution.Handle, 'String');
        targetDistributionValue = get(popupTargetDistribution.Handle, 'Value');
        targetDistribution = targetDistributionString{targetDistributionValue};
        
        targetNumber = str2double(get(editTargetNumber.Handle, 'String'));
        trialNumber = str2double(get(editTrials.Handle, 'String'));
        
        %% Generate target distributions for all trials based on the input.
        % Calculate the anglular position properties (parameter independent).
        nTargetAzimuths = rand([targetNumber, trialNumber], 'single')*2*pi;
        nTargetElevations = rand([targetNumber, trialNumber], 'single')*2*pi;
        
        switch targetDistribution

            case 'Fixed'
                % Construct a set of spots at a fixed distance.
                [nXs, nYs, nZs] = sph2cart(nTargetAzimuths, nTargetElevations, targetDistance);

            case 'Normal'
                % Generate a normal distribution object.
                normalDist = makedist('Normal', targetDistance, sqrt(targetDistance));
                
                % Construct a set of spots normally distributed around r.
                tDistances = normalDist.random([targetNumber, trialNumber]);
                [nXs, nYs, nZs] = sph2cart(nTargetAzimuths, nTargetElevations, tDistances);

            case 'Uniform'
                % Create a uniform distribution object.
                uniformDist = makedist('Uniform', 'Lower', 0, 'Upper', 2*targetDistance);
                
                % Construct a set of spots uniformly distributed around r.
                tDistances = uniformDist.random([targetNumber, trialNumber]);
                [nXs, nYs, nZs] = sph2cart(nTargetAzimuths, nTargetElevations, tDistances);

        end % switch
        
        %% Get the objects to use for scan efficiency calculation.
        listObjectIdxs = get(listObjects, 'Value');
        scanCalcObjects = surpassObjects(listObjectIdxs);
        
        %% Setup the progress bar.
        hStatus.setText('Getting objects')
        hStatus.ProgressBar.setVisible(true)
        
        %% Calculate the scanning efficiency for the selected objects.        
        for o = 1:length(scanCalcObjects)
            % Update the progress bar.
            hStatus.setText(['Analyzing ' scanCalcObjects(o).Name])
            hStatus.ProgressBar.setValue(0)
            
            % Get the nth Imaris object to use for the calculation.
            oObject = scanCalcObjects(o).ImarisObject;
            
            %% Get the object position and size data.
            if xImarisApp.GetFactory.IsSpots(oObject)
                % Get the spot positions.
                objectPositions = oObject.GetPositionsXYZ;

                % Get the spot sizes.
                objectRadii = oObject.GetRadii;

            else
                % Get the number of surfaces.
                surfaceCount = oObject.GetNumberOfSurfaces;

                % Get the surface positions and times.
                objectPositions = zeros(surfaceCount, 3);
                objectRadii = zeros(surfaceCount, 1);
                for s = 1:surfaceCount
                    objectPositions(s, :) = oObject.GetCenterOfMass(s - 1);
                    
                    % Get the object vertices.
                    sVertices = oObject.GetVertices(s - 1);
                    
                    % Calculate an effective size for the surface from the
                    % center of mass to vertices distances.
                    objectRadii(s) = mean(sqrt(sum(...
                        bsxfun(@minus, sVertices, objectPositions(s, :)).^2, 2)));
                end % s
                
            end % if
        
            % Get the track data.
            trackParents = oObject.GetTrackIds;
            trackEdges = oObject.GetTrackEdges;
            trackLabels = unique(trackParents);
            
            %% Calculate each track's scanning efficiencies.
            % Update the progress bar.
            hStatus.ProgressBar.setMaximum(length(trackLabels))

            % Allocate an array to track the scanning efficiencies.
            rScanEfficiency = zeros(length(trackLabels), 1);
            
            for r = 1:length(trackLabels)
                % Get the track coordinates and center the track.
                rEdges = trackEdges(trackParents == trackLabels(r), :);
                rIDs = unique(rEdges);
                rPos = objectPositions(rIDs + 1, :);
                rPos = bsxfun(@minus, rPos, rPos(1, :));
                rRadii = objectRadii(rIDs + 1);
                
                % Calculate the capture distances for the track.
                rCaptureDistances = rRadii + targetRadius;
                
                % Allocate an array to score the captures.
                tnEncounters = zeros(targetNumber, trialNumber);
                
                % Find the successful encounters by target and by trial.
                for n = 1:trialNumber
                    for t = 1:targetNumber
                        % Get the target.
                        tPos = [nXs(t, n), nYs(t, n), nZs(t, n)];
                        
                        % Calculate the distances to the target.
                        tDistances = sqrt(sum(bsxfun(@minus, rPos, tPos).^2, 2));
                        
                        % Record whether the track found the target.
                        tnEncounters(t, n) = any(tDistances < rCaptureDistances);        
                    end % for t
                end % for n
                
                % Calculate the track's scanning efficiency.
                rScanEfficiency(r) = mean(mean(tnEncounters, 2));
                
                % Increment the progress bar.
                hStatus.ProgressBar.setValue(r)
            end % for r
                        
            %% Transfer the track scan efficiencies to Imaris.
            % Create the stat name list.
            scanNames = repmat({['Scanning-(' ...
                targetDistribution(1) ')' num2str(targetDistance) 'um|' ...
                num2str(targetNumber) 'Nx' num2str(targetRadius) 'um']}, ...
                size(trackLabels));

            % Create the unit list.
            scanUnits = repmat({'Scans/target'}, ...
                size(trackLabels)); 

            % Assemble the factors cell array.
            scanFactors = cell(3, length(trackLabels));

            % Set the Category to Track.
            scanFactors(1, :) = repmat({'Track'}, size(trackLabels));

            % Set the Collection to any empty string.
            scanFactors(2, :) = repmat({''}, size(trackLabels));

            % Set the Time to an empty string.
            scanFactors(3, :) = repmat({''}, size(trackLabels));

            % Create the factor names.
            factorNames = {'Category'; 'Collection'; 'Time'};

            % Send the stats to Imaris.
            oObject.AddStatistics(scanNames, rScanEfficiency, scanUnits, ...
                scanFactors, factorNames, trackLabels)
        end % for n
        
        %% Reset the progress and status bars.
        hStatus.setText('')
        hStatus.ProgressBar.setValue(0)
        hStatus.ProgressBar.setVisible(false)     
    end % pushcalc      
end % sortomatoscanefficiency


function editvalidationcallback(hObject, ~, hObjectContainer)
    % EDITVALIDATIONCALLBACK Verify a string can convert to numeric
    %
    %

    %% Update the editbox value if the input is numeric.
    newValue = str2double(get(hObject, 'String'));

    if isnan(newValue)
        set(hObject, 'String', hObjectContainer.OldString)

    else
        % If the number of objects or trials was edited, round to the
        % nearest whole number.
        if any(strcmp(get(hObject, 'Tag'), {'editNumber', 'editTrials'}))
            newValue = round(newValue);
        end % if

        set(hObject, 'String', newValue)
        hObjectContainer.OldString = newValue;

    end % if
end % editvalidationcallback


function closerequestfcn(hObject, ~, hSortomatoBase)
    % Close the sortomato sub-GUI figure
    %
    %
    
    %% Remove the GUI's handle from the base's appdata and delete.
    guiChildren = getappdata(hSortomatoBase, 'guiChildren');

    guiIdx = guiChildren == hObject;
    guiChildren = guiChildren(~guiIdx);
    setappdata(hSortomatoBase, 'guiChildren', guiChildren)
    delete(hObject);
end % closerequestfcn