function sortomatoclusteranalysis(~, ~, hSortomatoBase)
    % SORTOMATOCLUSTERANALYSIS Perform cluster analysis
    %   Detailed explanation goes here
    %
    %   ©2010-2013, P. Beemiller. Licensed under a Creative Commmons Attribution
    %   license. Please see: http://creativecommons.org/licenses/by/3.0/
    %
   
    %% Check for an already-running GUI.
    guiChildren = getappdata(hSortomatoBase, 'guiChildren');
    
    if ~isempty(guiChildren)
        guiClusters = findobj(guiChildren, 'Tag', 'guiClusters');
        
        if ~isempty(guiClusters)
            figure(guiClusters)
            return
        end % if
    end % if
    
    %% Get the Surpass Spots and Surfaces.
    xImarisApp = getappdata(hSortomatoBase, 'xImarisApp');
    surpassObjects = xtgetsporfaces(xImarisApp, 'Both');
    
    % If the scene has no Spots or Surfaces, return.
    if isempty(surpassObjects)
        return
    end % if
    
    %% Set the figure and font colors.
    if all(get(hSortomatoBase, 'Color') == [0 0 0])
        bColor = 'k';
        fColor = 'w';
        
    else
        bColor = 'w';
        fColor = 'k';
        
    end % if
    
    %% Create a GUI to select objects.
    sortomatoPos = get(hSortomatoBase, 'Position');
    
    guiWidth = 230;
    guiHeight = 390;
    guiPos = [...
        sortomatoPos(1) + sortomatoPos(3)/2 - guiWidth/2, ...
        sortomatoPos(2) + sortomatoPos(4) - guiHeight - 25, ...
        guiWidth, ...
        guiHeight];
    
    guiClusters = figure(...
        'CloseRequestFcn', {@closerequestfcn, hSortomatoBase}, ...
        'Color', bColor, ...
        'MenuBar', 'None', ...
        'Name', 'Cluster analysis', ...
        'NumberTitle', 'Off', ...
        'Position', guiPos, ...
        'Resize', 'Off', ...
        'Tag', 'guiClusters');
        
    % Create the object selection popup menu.
    uicontrol(...
        'Background', bColor, ...
        'FontSize', 12, ...
        'Foreground', fColor, ...
        'HorizontalAlign', 'Left', ...
        'Parent', guiClusters, ...
        'Position', [10 343 108 24], ...
        'String', 'Objects', ...
        'Style', 'text', ...
        'Tag', 'textObjects')
    
    popupObjects = uicontrol(...
        'Background', bColor, ...
        'FontSize', 12, ...
        'Foreground', fColor, ...
        'Parent', guiClusters, ...
        'Position', [120 347 100 24], ...
        'String', {surpassObjects.Name}, ...
        'Style', 'popupmenu', ...
        'Tag', 'popupObjects', ...
        'TooltipString', 'Select objects for cluster analysis', ...
        'Value', 1);
    
    % Create the algorithm selection popup menu.
    uicontrol(...
        'Background', bColor, ...
        'FontSize', 12, ...
        'Foreground', fColor, ...
        'HorizontalAlign', 'Left', ...
        'Position', [10 293 108 24], ...
        'String', 'Algorithm', ...
        'Style', 'text', ...
        'Tag', 'textAlgorithm')
    
    popupAlgorithm = uicontrol(...
        'Background', bColor, ...
        'FontSize', 12, ...
        'Foreground', fColor, ...
        'Parent', guiClusters, ...
        'Position', [120 297 100 24], ...
        'String', {'Gaussian mixture', 'K-means', 'Linkage'}, ...
        'Style', 'popupmenu', ...
        'Tag', 'popupAlgorithm', ...
        'TooltipString', 'Select a clustering algorithm', ...
        'Value', 1);
    
    % Create a cluster criterion popup menu.
    uicontrol(...
        'Background', bColor, ...
        'FontSize', 12, ...
        'Foreground', fColor, ...
        'HorizontalAlign', 'Left', ...
        'Position', [10 243 168 24], ...
        'String', 'Criterion', ...
        'Style', 'text', ...
        'Tag', 'textCriterion')
    
    uicontrol(...
        'Background', bColor, ...
        'Callback', {@popupcriterioncallback, guiClusters}, ...
        'FontSize', 12, ...
        'Foreground', fColor, ...
        'Parent', guiClusters, ...
        'Position', [120 247 100 24], ...
        'String', {'Manual', 'Calinski-Harabasz', 'Davies-Bouldin', 'Gap', 'Silhouette'}, ...
        'Style', 'popupmenu', ...
        'Tag', 'popupCriterion', ...
        'TooltipString', 'Select clustering evaluation criterion', ...
        'Value', 1);
    
    % Create the cluster number edit box.
    uicontrol(...
        'Background', bColor, ...
        'FontSize', 12, ...
        'Foreground', fColor, ...
        'HorizontalAlign', 'Left', ...
        'Position', [10 193 108 24], ...
        'String', 'Clusters', ...
        'Style', 'text', ...
        'Tag', 'textClusters')
    
    editClusters = mycontrol(...
        'Background', bColor, ...
        'FontSize', 12, ...
        'Foreground', fColor, ...
        'Parent', guiClusters, ...
        'Position', [150 197 70 24], ...
        'String', 2, ...
        'Style', 'edit', ...
        'Tag', 'editClusters', ...
        'TooltipString', 'Enter the number of clusters', ...
        'Value', 1);
    set(editClusters.Handle, 'Callback', {@editvalidationcallback, editClusters})
    
    % Create a panel to set the time point analysis setting.
    groupCalcTimes = uibuttongroup(...
        'BackgroundColor', bColor, ...
        'BorderType', 'Line', ...
        'FontSize', 12, ...
        'ForegroundColor', fColor, ...
        'HighlightColor', fColor, ...
        'Parent', guiClusters, ...
        'Position', [10 85 210 85]./[guiPos(3) guiPos(4) guiPos(3) guiPos(4)], ...
        'Title', 'Time points', ...
        'TitlePosition', 'Centertop', ...
        'Tag', 'groupCalcTimes', ...
        'Units', 'Pixels');
    
    uicontrol(...
        'Background', bColor, ...
        'FontSize', 10, ...
        'Foreground', fColor, ...
        'Parent', groupCalcTimes, ...
        'Position', [10 44 160 20], ...
        'Tag', 'radioSingle', ...
        'String', 'Single time point', ...
        'Style', 'radiobutton', ...
        'TooltipString', 'Calculate clusters for a single time point')
    
    editTimepoint = mycontrol(...
        'FontSize', 10, ...
        'Background', bColor, ...
        'FontSize', 10, ...
        'Foreground', fColor, ...
        'Parent', groupCalcTimes, ...
        'Position', [150 44 50 20], ...
        'String', 1, ...
        'Style', 'edit', ...
        'Tag', 'editTimepoint', ...
        'TooltipString', 'Enter the time point to analyze');
    set(editTimepoint.Handle, 'Callback', {@editvalidationcallback, editTimepoint})    
    
    uicontrol(...
        'Background', bColor, ...
        'FontSize', 10, ...
        'Foreground', fColor, ...
        'Parent', groupCalcTimes, ...
        'Position', [10 9 160 20], ...
        'String', 'All time points', ...
        'Style', 'radiobutton', ...
        'TooltipString', 'Calculate clustering for all time points')
    
    % Create the calculate button.
    uicontrol(...
        'Background', bColor, ...
        'Callback', {@pushcalc}, ...
        'FontSize', 12, ...
        'Foreground', fColor, ...
        'Parent', guiClusters, ...
        'Position', [130 40 90 24], ...
        'String', 'Calculate', ...
        'Style', 'pushbutton', ...
        'Tag', 'pushCalc', ...
        'TooltipString', 'Calculate k-means cluster values')
    
    %% Setup the status bar.
    hStatus = statusbar(guiClusters, '');
    hStatus.CornerGrip.setVisible(false)
    
    hStatus.ProgressBar.setForeground(java.awt.Color.black)
    hStatus.ProgressBar.setString('')
    hStatus.ProgressBar.setStringPainted(true)
    
    %% Add the GUI to the base's GUI children.
    guiChildren = getappdata(hSortomatoBase, 'guiChildren');
    guiChildren = [guiChildren; guiClusters];
    setappdata(hSortomatoBase, 'guiChildren', guiChildren)
    
    %% Nested function to setup cluster analysis
    function pushcalc(varargin)
        % Get data and call cluster analysis functions
        %
        %
        
        %% Setup the status bar.
        hStatus.setText('Getting object data')
        
        %% Get the seleted Surpass object.
        clusterObjectIdx = get(popupObjects, 'Value');
        xObject = surpassObjects(clusterObjectIdx).ImarisObject;
                       
        %% Get the Surpass object data.
        if xImarisApp.GetFactory.IsSpots(xObject)
            % Get the spot positions.
            objectPos = xObject.GetPositionsXYZ;

            % Get the spot times.
            objectTimeIdxs = xObject.GetIndicesT;

        else
            % Get the number of surfaces.
            surfaceCount = xObject.GetNumberOfSurfaces;

            % Get the surface positions and times.
            objectPos = zeros(surfaceCount, 3);
            objectTimeIdxs = zeros(surfaceCount, 1);
            for s = 1:surfaceCount
                objectPos(s, :) = xObject.GetCenterOfMass(s - 1);
                objectTimeIdxs(s) = xObject.GetTimeIndex(s - 1);
            end % s

        end % if

        %% Get the track data.
        trackIDs = xObject.GetTrackIds;
        if ~isempty(trackIDs)
            trackEdges = xObject.GetTrackEdges;
            objectParents = zeros(size(objectTimeIdxs));
            trackLabels = unique(trackIDs);

            for r = 1:length(trackLabels)
                rEdges = trackEdges(trackIDs == trackLabels(r), :);
                objectParents(unique(rEdges) + 1) = trackLabels(r);
            end % for r

        else
            objectParents = nan(size(objectTimeIdxs));

        end % if

        %% Get the time point setting.
        groupCalcTimes = findobj(guiClusters, 'Tag', 'groupCalcTimes');
        calcTimeSelection = get(get(groupCalcTimes, 'SelectedObject'), 'String');

        %% Organize the object data into a struct.
        if strncmp(calcTimeSelection, 'All', 3)
            tIdxs = 1:xImarisApp.GetDataSet.GetSizeT;
                
        else    
            tIdxs = str2double(get(editTimepoint.Handle, 'String'));
                
        end % if
        
        structClusters(tIdxs) = struct(...
            'ID', [], ...
            'KIdx', [], ...
            'KCentroid', [], ...
            'Parent', [], ..., 
            'Pos', [], ...
            'TIdx', [], ...
            'SilValues', []);
        
        for t = tIdxs
            % Get the object data for the selected time points.
            tIDs = find(objectTimeIdxs + 1 == t) - 1;
            structClusters(t).ID = tIDs;

            tParents = objectParents(objectTimeIdxs + 1 == t);
            structClusters(t).Parent = tParents;

            tPos = objectPos(objectTimeIdxs + 1 == t, :);
            structClusters(t).Pos = single(tPos);

            structClusters(t).TIdx = repmat(t, size(tIDs));
        end % for t
        
        %% Call the selected cluster routine.
        popupAlgorithmString = get(popupAlgorithm, 'String');
        popupAlgorithmValue = get(popupAlgorithm, 'Value');
        
        switch lower(popupAlgorithmString{popupAlgorithmValue})
            
            case 'gaussian mixture'
                sortomatogmdistribution(guiClusters, structClusters, xObject, hSortomatoBase)
                
            case 'k-means'
                sortomatokmeans(guiClusters, structClusters, xObject, hSortomatoBase)
                
            case 'linkage'
                sortomatolinkage(guiClusters, structClusters, xObject, hSortomatoBase)
                
        end % switch
        
        %% Reset the status bar.
        hStatus.ProgressBar.setValue(0)
        hStatus.ProgressBar.setVisible(false)
        hStatus.setText('')
    end % pushcalc
end % sortomatoclusteranalysis


%% Callback function to setup cluster criterion
function popupcriterioncallback(popuprCriterion, ~, guiClusters)
    % POPUPCLUSTERCRITERIONCALLBACK
    %
    %
    
    %% Change the cluster number label.
    textClusters = findobj(guiClusters, 'Tag', 'textClusters');
    
    criterionString = get(popuprCriterion, 'String');
    criterionValue = get(popuprCriterion, 'Value');
    
    if strcmp(criterionString(criterionValue), 'Manual')
        set(textClusters, 'String', 'Clusters')
        
    else
        set(textClusters, 'String', 'Max clusters')
        
    end % if    
end % popupcriterioncallback


%% Callback function to validate editbox changes
function editvalidationcallback(hObject, ~, hObjectContainer)
    % EDITVALIDATIONCALLBACK Verify a string can convert to numeric
    %
    %

    %% Update the editbox value if the input is numeric.
    newValue = str2double(get(hObject, 'String'));

    if isnan(newValue) || newValue < 0
        set(hObject, 'String', hObjectContainer.OldString)

    else
        newValue = round(newValue);
        
        set(hObject, 'String', newValue)
        hObjectContainer.OldString = newValue;

    end % if
end % editvalidationcallback


function closerequestfcn(hObject, ~, hSortomatoBase)
    % Close the k-means GUI figure
    %
    %
    
    %% Remove any open graph handles from the base's appdata and delete.
    % Find any open centered plot graphs.
    graphChildren = getappdata(hSortomatoBase, 'graphChildren');
    graphKMeans = findobj(graphChildren, 'Tag', 'graphKMeans');

    delete(graphChildren(ismember(graphChildren, graphKMeans)))
    graphChildren(ismember(graphChildren, graphKMeans)) = [];
    setappdata(hSortomatoBase, 'graphChildren', graphChildren)

    %% Remove the GUI's handle from the base's appdata and delete.
    guiChildren = getappdata(hSortomatoBase, 'guiChildren');

    guiIdx = guiChildren == hObject;
    guiChildren = guiChildren(~guiIdx);
    setappdata(hSortomatoBase, 'guiChildren', guiChildren)
    delete(hObject);
end % closerequestfcn